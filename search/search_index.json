{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ELP Parser Documentation","text":"<p>ELP Parser is a PHP library designed to parse and extract content from ELP (eXe Learning Package) files. It provides a simple and intuitive interface to access metadata and content from ELP packages.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Parse ELP files (both version 2 and 3 supported)</li> <li>Extract metadata like title, description, author, etc.</li> <li>Retrieve a complete metadata tree</li> <li>Access learning resource information</li> <li>Extract package contents to a specified directory</li> <li>JSON serialization support</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>&lt;?php\nuse Exelearning\\ElpParser\\ElpParser;\n\n// Parse an ELP file\n$parser = ElpParser::fromFile('path/to/your/package.elp');\n\n// Get metadata\n$title = $parser-&gt;getTitle();\n$author = $parser-&gt;getAuthor();\n$description = $parser-&gt;getDescription();\n\n// Extract contents\n$parser-&gt;extract('destination/path');\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>Install the ELP Parser via Composer by running the following command in your project directory:</p> <pre><code>composer require exelearning/elp-parser\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Here's a simple example to get you started with ELP Parser:</p> <pre><code>&lt;?php\n\nrequire 'vendor/autoload.php';\n\nuse Exelearning\\ElpParser\\ElpParser;\n\n// Create a parser instance from an ELP file\n$parser = ElpParser::fromFile('path/to/your/package.elp');\n\n// Access basic metadata\necho \"Title: \" . $parser-&gt;getTitle() . \"\\n\";\necho \"Author: \" . $parser-&gt;getAuthor() . \"\\n\";\necho \"Description: \" . $parser-&gt;getDescription() . \"\\n\";\n\n// Get all strings from the package\n$strings = $parser-&gt;getStrings();\n\n// Extract the package contents\n$parser-&gt;extract('path/to/destination');\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>No additional configuration is required. The library works out of the box once installed.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Explore advanced usage examples below</li> <li>Refer to the API Reference for a complete list of available methods</li> </ul>"},{"location":"#usage-guide","title":"Usage Guide","text":""},{"location":"#working-with-elp-files","title":"Working with ELP Files","text":""},{"location":"#parsing-an-elp-file","title":"Parsing an ELP File","text":"<p>To parse an ELP file, use the following code:</p> <pre><code>use Exelearning\\ElpParser\\ElpParser;\n\n$parser = ElpParser::fromFile('path/to/package.elp');\n</code></pre>"},{"location":"#accessing-metadata","title":"Accessing Metadata","text":"<p>The parser provides several methods to access package metadata:</p> <pre><code>&lt;?php\n// Get basic information\n$title = $parser-&gt;getTitle();\n$description = $parser-&gt;getDescription();\n$author = $parser-&gt;getAuthor();\n$license = $parser-&gt;getLicense();\n$language = $parser-&gt;getLanguage();\n$resourceType = $parser-&gt;getLearningResourceType();\n\n// Get the ELP version\n$version = $parser-&gt;getVersion();\n\n// Get all strings from the package\n$strings = $parser-&gt;getStrings();\n</code></pre>"},{"location":"#extracting-contents","title":"Extracting Contents","text":"<p>To extract the contents of an ELP package:</p> <pre><code>$parser-&gt;extract('path/to/destination');\n</code></pre>"},{"location":"#converting-to-array-or-json","title":"Converting to Array or JSON","text":"<p>The parser implements <code>JsonSerializable</code> and provides methods for data conversion:</p> <pre><code>&lt;?php\n// Get array representation\n$data = $parser-&gt;toArray();\n\n// Get JSON representation\n$json = json_encode($parser);\n</code></pre>"},{"location":"#exporting-to-a-json-file","title":"Exporting to a JSON file","text":"<p>You can directly export the parsed data to a JSON file using <code>exportJson()</code>:</p> <pre><code>$parser-&gt;exportJson('path/to/output.json');\n\n// Obtain a metadata tree\n$meta = $parser-&gt;getMetadata();\n</code></pre>"},{"location":"#version-compatibility","title":"Version Compatibility","text":"<p>The library supports both version 2 and version 3 of ELP files. The parsing process automatically detects the version and handles the content appropriately.</p>"},{"location":"#error-handling","title":"Error Handling","text":"<p>It's recommended to wrap operations in try-catch blocks to handle potential exceptions:</p> <pre><code>&lt;?php\ntry {\n    $parser = ElpParser::fromFile('path/to/package.elp');\n} catch (\\Exception $e) {\n    echo \"Error parsing ELP file: \" . $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>PHP 8.0 or higher</li> <li>SimpleXML extension</li> <li>ZipArchive extension</li> </ul>"},{"location":"#summary","title":"Summary","text":"<p>With ELP Parser, you can efficiently parse, extract, and manipulate the contents of ELP files. The library's flexibility and ease of use make it an excellent choice for working with eXe Learning Packages. Explore more advanced usage and detailed API documentation to harness its full potential.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#elpparser-class","title":"ELPParser Class","text":"<p>ELPParser class for parsing .elp (eXeLearning) project files. This class provides functionality to parse .elp files, which are ZIP archives containing XML content for eXeLearning projects. It supports both version 2 and 3 formats.</p> <p>Namespace: <code>Exelearning</code></p> <p>Implements: <code>JsonSerializable</code></p>"},{"location":"api/#constructor","title":"Constructor","text":""},{"location":"api/#__constructstring-filepath","title":"<code>__construct(string $filePath)</code>","text":"<p>Create a new ELPParser instance.</p> <ul> <li>Parameters:</li> <li><code>$filePath</code> (string): Path to the .elp file</li> <li>Throws: <code>Exception</code> if file cannot be opened or is invalid</li> <li>Return: void</li> </ul>"},{"location":"api/#static-methods","title":"Static Methods","text":""},{"location":"api/#fromfilestring-filepath-elpparser","title":"<code>fromFile(string $filePath): ELPParser</code>","text":"<p>Static method to create an ELPParser from a file path.</p> <ul> <li>Parameters:</li> <li><code>$filePath</code> (string): Path to the .elp file</li> <li>Throws: <code>Exception</code> if file cannot be opened or is invalid</li> <li>Returns: <code>ELPParser</code></li> </ul>"},{"location":"api/#public-methods","title":"Public Methods","text":""},{"location":"api/#getversion-int","title":"<code>getVersion(): int</code>","text":"<p>Get the detected ELP file version.</p> <ul> <li>Returns: int - ELP file version (2 or 3)</li> </ul>"},{"location":"api/#getstrings-array","title":"<code>getStrings(): array</code>","text":"<p>Get all extracted strings.</p> <ul> <li>Returns: array - List of extracted strings</li> </ul>"},{"location":"api/#gettitle-string","title":"<code>getTitle(): string</code>","text":"<p>Get the title of the ELP content.</p> <ul> <li>Returns: string</li> </ul>"},{"location":"api/#getdescription-string","title":"<code>getDescription(): string</code>","text":"<p>Get the description of the ELP content.</p> <ul> <li>Returns: string</li> </ul>"},{"location":"api/#getauthor-string","title":"<code>getAuthor(): string</code>","text":"<p>Get the author of the ELP content.</p> <ul> <li>Returns: string</li> </ul>"},{"location":"api/#getlicense-string","title":"<code>getLicense(): string</code>","text":"<p>Get the license of the ELP content.</p> <ul> <li>Returns: string</li> </ul>"},{"location":"api/#getlanguage-string","title":"<code>getLanguage(): string</code>","text":"<p>Get the language of the ELP content.</p> <ul> <li>Returns: string</li> </ul>"},{"location":"api/#getlearningresourcetype-string","title":"<code>getLearningResourceType(): string</code>","text":"<p>Get the learning resource type.</p> <ul> <li>Returns: string</li> </ul>"},{"location":"api/#toarray-array","title":"<code>toArray(): array</code>","text":"<p>Convert parser data to an array.</p> <ul> <li>Returns: array - Array containing:</li> <li>version: int</li> <li>title: string</li> <li>description: string</li> <li>author: string</li> <li>license: string</li> <li>language: string</li> <li>learningResourceType: string</li> <li>strings: array</li> </ul>"},{"location":"api/#jsonserialize-mixed","title":"<code>jsonSerialize(): mixed</code>","text":"<p>JSON serialization method implementing JsonSerializable interface.</p> <ul> <li>Returns: mixed - Data to be JSON serialized</li> </ul>"},{"location":"api/#exportjsonstring-destinationpath-null-string","title":"<code>exportJson(?string $destinationPath = null): string</code>","text":"<p>Export parsed data to JSON. If a destination path is provided, the JSON will be written to that file.</p> <ul> <li>Parameters:</li> <li><code>$destinationPath</code> (string|null): Optional file path for the JSON output</li> <li>Throws: <code>Exception</code> if the JSON cannot be written</li> <li>Returns: string - JSON representation of the parsed data</li> </ul>"},{"location":"api/#getmetadata-array","title":"<code>getMetadata(): array</code>","text":"<p>Return a detailed metadata array containing Package, Dublin Core, LOM and LOM-ES information together with the page tree.</p> <ul> <li>Throws: <code>Exception</code> if the XML cannot be parsed</li> <li>Returns: array - Metadata structure</li> </ul>"},{"location":"api/#extractstring-destinationpath-void","title":"<code>extract(string $destinationPath): void</code>","text":"<p>Extract contents of an ELP file to a specified directory.</p> <ul> <li>Parameters:</li> <li><code>$destinationPath</code> (string): Directory to extract contents to</li> <li>Throws: <code>Exception</code> if extraction fails</li> <li>Returns: void</li> </ul>"},{"location":"api/#protected-properties","title":"Protected Properties","text":"<ul> <li><code>$filePath</code> (string): Path to the .elp file</li> <li><code>$version</code> (int): ELP file version (2 or 3)</li> <li><code>$content</code> (array): Extracted content and metadata</li> <li><code>$strings</code> (array): Raw extracted strings</li> <li><code>$title</code> (string): Title of the ELP content</li> <li><code>$description</code> (string): Description of the ELP content</li> <li><code>$author</code> (string): Author of the ELP content</li> <li><code>$license</code> (string): License of the ELP content</li> <li><code>$language</code> (string): Language of the ELP content</li> <li><code>$learningResourceType</code> (string): Learning resource type</li> </ul>"}]}